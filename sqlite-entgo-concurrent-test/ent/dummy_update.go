// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/enriquebris/labx/sqlite-entgo-concurrent-test/ent/dummy"
	"github.com/enriquebris/labx/sqlite-entgo-concurrent-test/ent/predicate"
)

// DummyUpdate is the builder for updating Dummy entities.
type DummyUpdate struct {
	config
	hooks    []Hook
	mutation *DummyMutation
}

// Where appends a list predicates to the DummyUpdate builder.
func (du *DummyUpdate) Where(ps ...predicate.Dummy) *DummyUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetName sets the "name" field.
func (du *DummyUpdate) SetName(s string) *DummyUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DummyUpdate) SetNillableName(s *string) *DummyUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// ClearName clears the value of the "name" field.
func (du *DummyUpdate) ClearName() *DummyUpdate {
	du.mutation.ClearName()
	return du
}

// SetAge sets the "age" field.
func (du *DummyUpdate) SetAge(i int) *DummyUpdate {
	du.mutation.ResetAge()
	du.mutation.SetAge(i)
	return du
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (du *DummyUpdate) SetNillableAge(i *int) *DummyUpdate {
	if i != nil {
		du.SetAge(*i)
	}
	return du
}

// AddAge adds i to the "age" field.
func (du *DummyUpdate) AddAge(i int) *DummyUpdate {
	du.mutation.AddAge(i)
	return du
}

// ClearAge clears the value of the "age" field.
func (du *DummyUpdate) ClearAge() *DummyUpdate {
	du.mutation.ClearAge()
	return du
}

// Mutation returns the DummyMutation object of the builder.
func (du *DummyUpdate) Mutation() *DummyMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DummyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DummyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			if du.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DummyUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DummyUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DummyUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DummyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dummy.Table,
			Columns: dummy.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dummy.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dummy.FieldName,
		})
	}
	if du.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: dummy.FieldName,
		})
	}
	if value, ok := du.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dummy.FieldAge,
		})
	}
	if value, ok := du.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dummy.FieldAge,
		})
	}
	if du.mutation.AgeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: dummy.FieldAge,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dummy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DummyUpdateOne is the builder for updating a single Dummy entity.
type DummyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DummyMutation
}

// SetName sets the "name" field.
func (duo *DummyUpdateOne) SetName(s string) *DummyUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DummyUpdateOne) SetNillableName(s *string) *DummyUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// ClearName clears the value of the "name" field.
func (duo *DummyUpdateOne) ClearName() *DummyUpdateOne {
	duo.mutation.ClearName()
	return duo
}

// SetAge sets the "age" field.
func (duo *DummyUpdateOne) SetAge(i int) *DummyUpdateOne {
	duo.mutation.ResetAge()
	duo.mutation.SetAge(i)
	return duo
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (duo *DummyUpdateOne) SetNillableAge(i *int) *DummyUpdateOne {
	if i != nil {
		duo.SetAge(*i)
	}
	return duo
}

// AddAge adds i to the "age" field.
func (duo *DummyUpdateOne) AddAge(i int) *DummyUpdateOne {
	duo.mutation.AddAge(i)
	return duo
}

// ClearAge clears the value of the "age" field.
func (duo *DummyUpdateOne) ClearAge() *DummyUpdateOne {
	duo.mutation.ClearAge()
	return duo
}

// Mutation returns the DummyMutation object of the builder.
func (duo *DummyUpdateOne) Mutation() *DummyMutation {
	return duo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DummyUpdateOne) Select(field string, fields ...string) *DummyUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Dummy entity.
func (duo *DummyUpdateOne) Save(ctx context.Context) (*Dummy, error) {
	var (
		err  error
		node *Dummy
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DummyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			if duo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DummyUpdateOne) SaveX(ctx context.Context) *Dummy {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DummyUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DummyUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DummyUpdateOne) sqlSave(ctx context.Context) (_node *Dummy, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dummy.Table,
			Columns: dummy.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dummy.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Dummy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dummy.FieldID)
		for _, f := range fields {
			if !dummy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dummy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dummy.FieldName,
		})
	}
	if duo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: dummy.FieldName,
		})
	}
	if value, ok := duo.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dummy.FieldAge,
		})
	}
	if value, ok := duo.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: dummy.FieldAge,
		})
	}
	if duo.mutation.AgeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: dummy.FieldAge,
		})
	}
	_node = &Dummy{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dummy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
