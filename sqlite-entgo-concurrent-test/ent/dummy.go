// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/enriquebris/labx/sqlite-entgo-concurrent-test/ent/dummy"
)

// Dummy is the model entity for the Dummy schema.
type Dummy struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dummy) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case dummy.FieldID, dummy.FieldAge:
			values[i] = new(sql.NullInt64)
		case dummy.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Dummy", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dummy fields.
func (d *Dummy) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dummy.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case dummy.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case dummy.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				d.Age = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Dummy.
// Note that you need to call Dummy.Unwrap() before calling this method if this Dummy
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dummy) Update() *DummyUpdateOne {
	return (&DummyClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Dummy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Dummy) Unwrap() *Dummy {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dummy is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dummy) String() string {
	var builder strings.Builder
	builder.WriteString("Dummy(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", name=")
	builder.WriteString(d.Name)
	builder.WriteString(", age=")
	builder.WriteString(fmt.Sprintf("%v", d.Age))
	builder.WriteByte(')')
	return builder.String()
}

// Dummies is a parsable slice of Dummy.
type Dummies []*Dummy

func (d Dummies) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
